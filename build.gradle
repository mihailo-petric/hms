plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.4'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'com.diffplug.spotless' version '7.0.2'
  id 'jacoco'
}

spotless {
  java {
    googleJavaFormat()
  }
}

group = 'com.hyperoptic'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
  implementation 'org.modelmapper:modelmapper:3.2.2'
  implementation 'org.liquibase:liquibase-core'

  implementation 'com.mysql:mysql-connector-j:9.2.0'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'


  compileOnly("org.projectlombok:lombok:1.18.38")
  annotationProcessor("org.projectlombok:lombok:1.18.38")

  testCompileOnly("org.projectlombok:lombok:1.18.38")
  testAnnotationProcessor("org.projectlombok:lombok:1.18.38")

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'com.h2database:h2:2.3.232'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named("test") {
  useJUnitPlatform {
    excludeTags("integration")
  }
  finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
  useJUnitPlatform {
    includeTags 'integration'
  }
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
}

jacocoTestCoverageVerification {
  dependsOn test

  violationRules {
    rule {
      element = 'PACKAGE'
      includes = ['com.hyperoptic.hms.services']

      limit {
        counter = 'BRANCH'
        minimum = 1.0
      }
    }
  }
}

jacocoTestReport {
  dependsOn test

  reports {
    xml.required = true
    html.required = true
    csv.required = false
  }

  classDirectories.setFrom(
    fileTree(dir: "$buildDir/classes/java/main", includes: [
      'com/hyperoptic/hms/services/**'
    ])
  )

  sourceDirectories.setFrom(files('src/main/java'))
  executionData.setFrom(fileTree(dir: buildDir, includes: [
    'jacoco/test.exec', 'jacoco/test*.exec'
  ]))
}

check.dependsOn 'jacocoTestCoverageVerification'
test.finalizedBy 'jacocoTestReport'
